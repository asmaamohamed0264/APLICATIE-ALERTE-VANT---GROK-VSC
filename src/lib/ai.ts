import { cache } from './cache';
import { rateLimiter } from './rateLimit';

interface AlertData {
  location: string;
  level: 'low' | 'moderate' | 'high' | 'extreme';
  when: string;
  peak: number;
  threshold: number;
}

async function generateAIMessageWithOpenRouter(alertData: AlertData): Promise<string> {
  const cacheKey = `ai-message-${JSON.stringify(alertData)}`;
  const cached = cache.get<string>(cacheKey);
  if (cached) return cached;

  if (rateLimiter.isRateLimited('openrouter')) {
    throw new Error('OpenRouter rate limit exceeded');
  }

  const apiKey = process.env.OPENROUTER_API_KEY;
  if (!apiKey) throw new Error('OpenRouter API key not configured');

  const prompt = `Genera탵i un mesaj de alert캒 pentru vreme rea 칥n limba rom칙n캒, cu umor, pentru urm캒toarele date:
- Loca탵ie: ${alertData.location}
- Nivel: ${alertData.level}
- C칙nd: ${alertData.when}
- V칙rf: ${alertData.peak} km/h
- Prag: ${alertData.threshold} km/h

Mesajul trebuie s캒 includ캒:
- Loca탵ia
- Nivelul alertei
- C칙nd va fi v칙ntul puternic
- V칙rful vitezei v칙ntului
- Pragul de alert캒
- Sfaturi de siguran탵캒 cu buline

Folosi탵i umor rom칙nesc 탳i fi탵i prietenos dar serios c칙nd e nevoie.`;

  const response = await fetch('https://openrouter.ai/api/v1/chat/completions', {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${apiKey}`,
      'Content-Type': 'application/json',
      'HTTP-Referer': process.env.APP_URL || 'http://localhost:3000',
      'X-Title': 'Grand Arena Wind Monitor'
    },
    body: JSON.stringify({
      model: 'mistralai/mistral-small-3.1-24b-instruct:free',
      messages: [
        {
          role: 'user',
          content: prompt
        }
      ],
      max_tokens: 500,
      temperature: 0.7
    })
  });

  if (!response.ok) {
    throw new Error(`OpenRouter API error: ${response.status}`);
  }

  const data = await response.json();
  const message = data.choices[0]?.message?.content?.trim();

  if (!message) {
    throw new Error('No message generated by AI');
  }

  cache.set(cacheKey, message, 30 * 60 * 1000); // Cache for 30 minutes
  return message;
}

export async function generateAlertMessage(alertData: AlertData): Promise<string> {
  try {
    return await generateAIMessageWithOpenRouter(alertData);
  } catch (error) {
    console.error('AI message generation failed:', error);
    // Fallback to simple message
    return `游뚿 Alert캒 V칙nt ${alertData.level.toUpperCase()}: ${alertData.peak} km/h 칥n ${alertData.when} la ${alertData.location}. Prag: ${alertData.threshold} km/h. Ia m캒suri de siguran탵캒!`;
  }
}